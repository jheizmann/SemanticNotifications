C({"name": "jQuery.Model.static.model", "params": {"attributes": {"description": "<p>An object of name-value pairs or an object that has a \n data, attributes, or 'shortName' property that maps to an object of name-value pairs.</p>", "type": "Object", "optional": false, "order": 0, "name": "attributes"}}, "ret": {"description": "<p>an instance of the model</p>", "type": "Model"}, "type": "function", "parent": "jQuery.Model.static", "comment": "<p>$.Model.model is used as a [http://api.jquery.com/extending-ajax/#Converters Ajax converter] \nto convert the response of a [jQuery.Model.static.findOne] request \ninto a model instance.  </p>\n\n<p>You will never call this method directly.  Instead, you tell $.ajax about it in findOne:</p>\n\n<pre><code>$.Model('Recipe',{\n  findOne : function(params, success, error ){\n    return $.ajax({\n      url: '/services/recipes/'+params.id+'.json',\n      type: 'get',\n\n      dataType : 'json recipe.model' //LOOK HERE!\n    });\n  }\n},{})\n</code></pre>\n\n<p>This makes the result of findOne a [http://api.jquery.com/category/deferred-object/ $.Deferred]\nthat resolves to a model instance:</p>\n\n<pre><code>var deferredRecipe = Recipe.findOne({id: 6});\n\ndeferredRecipe.then(function(recipe){\n  console.log('I am '+recipes.description+'.');\n})\n</code></pre>\n\n<h2>Non-standard Services</h2>\n\n<p>$.jQuery.model expects data to be name-value pairs like:</p>\n\n<pre><code>{id: 1, name : \"justin\"}\n</code></pre>\n\n<p>It can also take an object with attributes in a data, attributes, or\n'shortName' property.  For a App.Models.Person model the following will  all work:</p>\n\n<pre><code>{ data : {id: 1, name : \"justin\"} }\n\n{ attributes : {id: 1, name : \"justin\"} }\n\n{ person : {id: 1, name : \"justin\"} }\n</code></pre>\n\n<h3>Overwriting Model</h3>\n\n<p>If your service returns data like:</p>\n\n<pre><code>{id : 1, name: \"justin\", data: {foo : \"bar\"} }\n</code></pre>\n\n<p>This will confuse $.Model.model.  You will want to overwrite it to create \nan instance manually:</p>\n\n<pre><code>$.Model('Person',{\n  model : function(data){\n    return new this(data);\n  }\n},{})\n</code></pre>\n\n<h2>API</h2>", "children": []})