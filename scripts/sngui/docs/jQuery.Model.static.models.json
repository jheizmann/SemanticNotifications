C({"name": "jQuery.Model.static.models", "params": {"instancesRawData": {"description": "<p>an array of raw name - value pairs.</p>", "type": "Array", "optional": false, "order": 0, "name": "instancesRawData"}}, "ret": {"description": "<p>a JavaScript array of instances or a [jQuery.Model.List list] of instances\n if the model list plugin has been included.</p>", "type": "Array"}, "type": "function", "parent": "jQuery.Model.static", "comment": "<p>$.Model.models is used as a [http://api.jquery.com/extending-ajax/#Converters Ajax converter] \nto convert the response of a [jQuery.Model.static.findAll] request \ninto an array (or [jQuery.Model.List $.Model.List]) of model instances.  </p>\n\n<p>You will never call this method directly.  Instead, you tell $.ajax about it in findAll:</p>\n\n<pre><code>$.Model('Recipe',{\n  findAll : function(params, success, error ){\n    return $.ajax({\n      url: '/services/recipes.json',\n      type: 'get',\n      data: params\n\n      dataType : 'json recipe.models' //LOOK HERE!\n    });\n  }\n},{})\n</code></pre>\n\n<p>This makes the result of findAll a [http://api.jquery.com/category/deferred-object/ $.Deferred]\nthat resolves to a list of model instances:</p>\n\n<pre><code>var deferredRecipes = Recipe.findAll({});\n\ndeferredRecipes.then(function(recipes){\n  console.log('I have '+recipes.length+'recipes.');\n})\n</code></pre>\n\n<h2>Non-standard Services</h2>\n\n<p>$.jQuery.models expects data to be an array of name-value pairs like:</p>\n\n<pre><code>[{id: 1, name : \"justin\"},{id:2, name: \"brian\"}, ...]\n</code></pre>\n\n<p>It can also take an object with additional data about the array like:</p>\n\n<pre><code>{\n  count: 15000 //how many total items there might be\n  data: [{id: 1, name : \"justin\"},{id:2, name: \"brian\"}, ...]\n}\n</code></pre>\n\n<p>In this case, models will return an array of instances found in \ndata, but with additional properties as expandos on the array:</p>\n\n<pre><code>var people = Person.models({\n  count : 1500,\n  data : [{id: 1, name: 'justin'}, ...]\n})\npeople[0].name // -&gt; justin\npeople.count // -&gt; 1500\n</code></pre>\n\n<h3>Overwriting Models</h3>\n\n<p>If your service returns data like:</p>\n\n<pre><code>{ballers: [{name: \"justin\", id: 5}]}\n</code></pre>\n\n<p>You will want to overwrite models to pass the base models what it expects like:</p>\n\n<pre><code>$.Model('Person',{\n  models : function(data){\n    this._super(data.ballers);\n  }\n},{})\n</code></pre>", "children": []})