C({"name": "jQuery.Model", "type": "class", "parent": "../jquery/model/model.js", "comment": "<p>Models wrap an application's data layer.  In large applications, a model is critical for:</p>\n\n<ul>\n<li><p>[jquery.model.encapsulate Encapsulating] services so controllers + views don't care where data comes from.</p></li>\n<li><p>Providing helper functions that make manipulating and abstracting raw service data easier.</p></li>\n</ul>\n\n<p>This is done in two ways:</p>\n\n<ul>\n<li><p>Requesting data from and interacting with services</p></li>\n<li><p>Converting or wrapping raw service data into a more useful form.</p></li>\n</ul>\n\n<h2>Basic Use</h2>\n\n<p>The [jQuery.Model] class provides a basic skeleton to organize pieces of your application's data layer.\nFirst, consider doing Ajax <b>without</b> a model.  In our imaginary app, you:</p>\n\n<ul>\n<li>retrieve a list of tasks</li></li>\n<li>display the number of days remaining for each task</li>\n<li>mark tasks as complete after users click them</li>\n</ul>\n\n<p>Let's see how that might look without a model:</p>\n\n<pre><code class='javascript'>$.Controller(\"Tasks\",\n{\n  // get tasks when the page is ready \n  init: function() {\n    $.get('/tasks.json', this.callback('gotTasks'), 'json')\n  },\n |* \n  * assume json is an array like [{name: \"trash\", due_date: 1247111409283}, ...]\n  */\n gotTasks: function( json ) { \n    for(var i =0; i < json.length; i++){\n      var taskJson = json[i];\n\n      //calculate time remaining\n      var remaininTime = new Date() - new Date(taskJson.due_date);\n\n      //append some html\n      $(\"#tasks\").append(\"&lt;div class='task' taskid='\"+taskJson.id+\"'>\"+\n                          \"&lt;label>\"+taskJson.name+\"&lt;/label>\"+\n                          \"Due Date = \"+remaininTime+\"&lt;/div>\")\n    }\n  },\n  // when a task is complete, get the id, make a request, remove it\n  \".task click\" : function( el ) {\n    $.post('/tasks/'+el.attr('data-taskid')+'.json',\n         {complete: true}, \n      function(){\n        el.remove();\n      })\n  }\n})</code></pre>\n\n<p>This code might seem fine for right now, but what if:</p>\n\n<ul>\n<li>The service changes?</li>\n<li>Other parts of the app want to calculate <code>remaininTime</code>?</li>\n<li>Other parts of the app want to get tasks?</li></li>\n<li>The same task is represented multiple palces on the page?</li>\n</ul>\n\n<p>The solution is of course a strong model layer.  Lets look at what a\na good model does for a controller before we learn how to make one:</p>\n\n<pre><code class='javascript'>$.Controller(\"Tasks\",\n{\n  init: function() {\n    Task.findAll({}, this.callback('tasks'));\n  },\n  list : function(todos){\n    this.element.html(\"tasks.ejs\", todos );\n  },\n  \".task click\" : function( el ) {\n    el.model().update({complete: true},function(){\n      el.remove();\n    });\n  }\n});</code></pre>\n\n<p>In tasks.ejs</p>\n\n<pre><code class='html'>&lt;% for(var i =0; i &lt; tasks.length; i++){ %>\n&lt;div &lt;%= tasks[i] %>>\n   &lt;label>&lt;%= tasks[i].name %>&lt;/label>\n   &lt;%= tasks[i].<b>timeRemaining</b>() %>\n&lt;/div>\n&lt;% } %></code></pre>\n\n<p>Isn't that better!  Granted, some of the improvement comes because we used a view, but we've\nalso made our controller completely understandable.  Now lets take a look at the model:</p>\n\n<pre><code class='javascript'>$.Model(\"Task\",\n{\n findAll: \"/tasks.json\",\n update: \"/tasks/{id}.json\"\n},\n{\n timeRemaining: function() {\n  return new Date() - new Date(this.due_date)\n }\n})</code></pre>\n\n<p>Much better!  Now you have a single place where you \ncan organize Ajax functionality and\nwrap the data that it returned.  Lets go through \neach bolded item in the controller and view.</p>\n\n<h3>Task.findAll</h3>\n\n<p>The findAll function requests data from \"/tasks.json\".  When the data is returned, \nit converted by the [jQuery.Model.static.models models] function before being \npassed to the success callback.</p>\n\n<h3>el.model</h3>\n\n<p>[jQuery.fn.model] is a jQuery helper that returns a model instance from an element.  The \nlist.ejs template assings tasks to elements with the following line:</p>\n\n<pre><code class='html'>&lt;div &lt;%= tasks[i] %>> ... &lt;/div></code></pre>\n\n<h3>timeRemaining</h3>\n\n<p>timeRemaining is an example of wrapping your model's raw data with more useful functionality.</p>\n\n<h2>Other Good Stuff</h2>\n\n<p>This is just a tiny taste of what models can do.  Check out these other features:</p>\n\n<h3>[jquery.model.encapsulate Encapsulation]</h3>\n\n<p>Learn how to connect to services.</p>\n\n<pre><code>$.Model(\"Task\",{\n  findAll : \"/tasks.json\",    \n  findOne : \"/tasks/{id}.json\", \n  create : \"/tasks.json\",\n  update : \"/tasks/{id}.json\"\n},{})\n</code></pre>\n\n<h3>[jquery.model.typeconversion Type Conversion]</h3>\n\n<p>Convert data like \"10-20-1982\" into new Date(1982,9,20) auto-magically:</p>\n\n<pre><code>$.Model(\"Task\",{\n  attributes : {birthday : \"date\"}\n  convert : {\n    date : function(raw){ ... }\n  }\n},{})\n</code></pre>\n\n<h3>[jQuery.Model.List]</h3>\n\n<p>Learn how to handle multiple instances with ease.</p>\n\n<pre><code>$.Model.List(\"Task.List\",{\n  destroyAll : function(){\n    var ids = this.map(function(c){ return c.id });\n    $.post(\"/destroy\",\n      ids,\n      this.callback('destroyed'),\n      'json')\n  },\n  destroyed : function(){\n    this.each(function(){ this.destroyed() });\n  }\n});\n\n\".destroyAll click\" : function(){\n  this.find('.destroy:checked')\n      .closest('.task')\n      .models()\n      .destroyAll();\n}\n</code></pre>\n\n<h3>[jquery.model.validations Validations]</h3>\n\n<p>Validate your model's attributes.</p>\n\n<pre><code>$.Model(\"Contact\",{\ninit : function(){\n    this.validate(\"birthday\",function(){\n        if(this.birthday &gt; new Date){\n            return \"your birthday needs to be in the past\"\n        }\n    })\n}\n,{});\n</code></pre>", "tags": ["core"], "download": "http://jmvcsite.heroku.com/pluginify?plugins[]=jquery/model/model.js", "test": "jquery/model/qunit.html", "plugin": "jquery/model", "children": ["jQuery.Model.static", "jQuery.Model.static.create", "jQuery.Model.static.update", "jQuery.Model.static.destroy", "jQuery.Model.static.findAll", "jQuery.Model.static.findOne", "jQuery.Model.static.attributes", "jQuery.Model.static.wrap", "jQuery.Model.static.model", "jQuery.Model.static.wrapMany", "jQuery.Model.static.models", "jQuery.Model.static.id", "jQuery.Model.static.addAttr", "jQuery.Model.static.publish", "jQuery.Model.static.convert", "jQuery.Model.prototype", "jQuery.Model.prototype.setup", "jQuery.Model.prototype.update", "jQuery.Model.prototype.errors", "jQuery.Model.prototype.attr", "jQuery.Model.prototype.bind", "jQuery.Model.prototype.unbind", "jQuery.Model.prototype._setProperty", "jQuery.Model.prototype._updateProperty", "jQuery.Model.prototype.attrs", "jQuery.Model.prototype.isNew", "jQuery.Model.prototype.save", "jQuery.Model.prototype.destroy", "jQuery.Model.prototype.identity", "jQuery.Model.prototype.elements", "jQuery.Model.prototype.publish", "jQuery.Model.prototype.created", "jQuery.Model.prototype.updated", "jQuery.Model.prototype.destroyed", "jquery.model.services"]})